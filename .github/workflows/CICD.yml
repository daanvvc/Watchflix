name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
  backend_service:
    name: Build, test and analyze backend services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ Gateway, MovieService, Eureka, MovieFileService, EventBus, UserService ]
      fail-fast: false
    defaults:
      run:
        working-directory: ./${{ matrix.service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Gradlew permission
        run: chmod +x ./gradlew
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
         path: ~/.sonar/cache
         key: ${{ runner.os }}-sonar
         restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
         path: ~/.gradle/caches
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
         restore-keys: ${{ runner.os }}-gradle
      - name: Build ${{ matrix.service }}
        run: ./gradlew build -x test
      - name: Unit test (with coverage) ${{ matrix.service }}
        run: ./gradlew test jacocoTestReport
        env:
          VIRUSTOTAL_API_KEY: ${{ matrix.service == 'MovieFileService' && secrets.VIRUSTOTAL_API_KEY || '' }}
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u daanvervaecke --password-stdin
      - name: Build Docker image ${{ matrix.service }}
        run: |
          IMAGE_NAME=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
          docker build -t daanvervaecke/watchlist-$IMAGE_NAME:latest .
      - name: Push Docker image of ${{ matrix.service }} to Docker Hub
        run: |
          IMAGE_NAME=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
          docker push daanvervaecke/watchlist-$IMAGE_NAME:latest
      - name: Sonar scan ${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
      - name: Snyk monitor ${{ matrix.service }}
        run: snyk monitor
  frontend_service:
    name: Build, test and analyze webapp
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ Watchflix ]
      fail-fast: false
    defaults:
      run:
        working-directory: ./${{ matrix.service }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Run build ${{ matrix.service }}
        run: npm run build
      - name: Unit test ${{ matrix.service }}
        run: npm test
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u daanvervaecke --password-stdin
      - name: Build Docker image ${{ matrix.service }}
        run: docker build -t daanvervaecke/watchflix-webapp:latest .
      - name: Push Docker image of ${{ matrix.service }} to Docker Hub
        run: docker push daanvervaecke/watchflix-webapp:latest
      - name: Sonar scan ${{ matrix.service }}
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          projectBaseDir: ./${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
      - name: Snyk monitor ${{ matrix.service }}
        run: snyk monitor