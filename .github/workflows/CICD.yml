name: CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "development" ]

jobs:
#  backend_service:
#    name: Backend services
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        service: [ Gateway, MovieService, Eureka, MovieFileService, EventBus, UserService ]
#      fail-fast: false
#    defaults:
#      run:
#        working-directory: ./${{ matrix.service }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: 17
#          distribution: 'zulu'
#      - name: Gradlew permission
#        run: chmod +x ./gradlew
#      - name: Cache SonarQube packages
#        uses: actions/cache@v4
#        with:
#         path: ~/.sonar/cache
#         key: ${{ runner.os }}-sonar
#         restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#         path: ~/.gradle/caches
#         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#         restore-keys: ${{ runner.os }}-gradle
#      - name: Build ${{ matrix.service }}
#        run: ./gradlew build -x test
#      - name: Unit test (with coverage) ${{ matrix.service }}
#        run: ./gradlew test --tests '*Unit*' jacocoTestReport
#        env:
#          VIRUSTOTAL_API_KEY: ${{ matrix.service == 'MovieFileService' && secrets.VIRUSTOTAL_API_KEY || '' }}
#      - name: Log in to Docker Hub
#        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u daanvervaecke --password-stdin
#      - name: Build Docker image ${{ matrix.service }}
#        run: |
#          IMAGE_NAME=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
#          docker build -t daanvervaecke/watchflix-$IMAGE_NAME:latest .
#      - name: Push Docker image of ${{ matrix.service }} to Docker Hub
#        run: |
#          IMAGE_NAME=$(echo "${{ matrix.service }}" | tr '[:upper:]' '[:lower:]')
#          docker push daanvervaecke/watchflix-$IMAGE_NAME:latest
#      - name: Sonar scan ${{ matrix.service }}
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew build sonar -x test
#      - name: Install Snyk CLI
#        run: npm install -g snyk
#      - name: Authenticate Snyk
#        run: snyk auth ${{ secrets.SNYK_TOKEN }}
#      - name: Snyk monitor ${{ matrix.service }}
#        run: snyk monitor
#
#  frontend_service:
#    name: Frontend services
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        service: [ Watchflix ]
#      fail-fast: false
#    defaults:
#      run:
#        working-directory: ./${{ matrix.service }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 22
#      - name: Cache node modules
#        uses: actions/cache@v4
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#      - name: Install dependencies
#        run: npm ci
#      - name: Run build ${{ matrix.service }}
#        run: npm run build
#      - name: Unit test ${{ matrix.service }}
#        run: npm test
#      - name: Log in to Docker Hub
#        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u daanvervaecke --password-stdin
#      - name: Build Docker image ${{ matrix.service }}
#        run: docker build --build-arg VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
#          --build-arg VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} -t daanvervaecke/watchflix-webapp:latest .
#      - name: Push Docker image of ${{ matrix.service }} to Docker Hub
#        run: docker push daanvervaecke/watchflix-webapp:latest
#      - name: Sonar scan ${{ matrix.service }}
#        uses: SonarSource/sonarqube-scan-action@v5
#        with:
#          projectBaseDir: ./${{ matrix.service }}
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      - name: Install Snyk CLI
#        run: npm install -g snyk
#      - name: Authenticate Snyk
#        run: snyk auth ${{ secrets.SNYK_TOKEN }}
#      - name: Snyk monitor ${{ matrix.service }}
#        run: snyk monitor
#
#  tests:
#    name: Tests
#    runs-on: ubuntu-latest
#    needs: [ backend_service, frontend_service ]
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#      - name: Start application with docker compose
#        run: docker compose up -d
#        env:
#          SECRET_KEY_AES: ${{ secrets.SECRET_KEY_AES }}
#          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
#          SECRET_KEY_NEON: ${{ secrets.SECRET_KEY_NEON }}
#          SECRET_KEY_ATLAS: ${{ secrets.SECRET_KEY_ATLAS }}
#          AZUREBLOB_API_KEY: ${{ secrets.AZUREBLOB_API_KEY }}
#          JWT_SECRET: ${{ secrets.JWT_SECRET }}
#          SECRET_KEY_SUPABASE: ${{ secrets.SECRET_KEY_SUPABASE }}
#          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#      - name: Wait for backend to be ready
#        run: timeout 60 bash -c 'until echo > /dev/tcp/localhost/8085; do sleep 2; done'
#      - name: Gradlew permission
#        working-directory: ./UserService
#        run: chmod +x ./gradlew
#      - name: Run backend integration tests
#        working-directory: ./UserService
#        run: ./gradlew test --tests '*Integration*'
#        env:
#          SECRET_KEY_AES: ${{ secrets.SECRET_KEY_AES }}
#          SECRET_KEY_SUPABASE: ${{ secrets.SECRET_KEY_SUPABASE }}
#          SECRET_KEY_NEON: ${{ secrets.SECRET_KEY_NEON }}
#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: 22
#      - name: Cache node modules
#        uses: actions/cache@v4
#        id: cache-node-modules
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('Watchflix/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#      - name: Install dependencies
#        working-directory: ./Watchflix
#        run: npm ci
#        env:
#          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
#          VITE_HOST: http://gateway:8085
#      - name: Cache Playwright browsers
#        uses: actions/cache@v4
#        id: cache-playwright
#        with:
#          path: ~/.cache/ms-playwright
#          key: ${{ runner.os }}-playwright-${{ hashFiles('Watchflix/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-playwright-
#      - name: Install Playwright browsers
#        working-directory: ./Watchflix
#        run: npx playwright install --with-deps
#      - name: Run Playwright tests
#        working-directory: ./Watchflix
#        run: npm run e2e
#        env:
#          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
#          VITE_HOST: http://localhost:8085
#      - name: Upload Playwright test artifacts upon failure
#        if: failure()
#        uses: actions/upload-artifact@v4
#        with:
#          name: playwright-results
#          path: ./Watchflix/test-results
#      - name: Stop backend services
#        if: always()
#        run: docker compose down

  deploy_AKS:
    name: Deploy to AKS
    runs-on: ubuntu-latest
#    needs: [ tests ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.SECRET_KEY_AZURE }}
      - name: Set Kubernetes context
        run: az aks get-credentials --resource-group Watchflix-Cloud --name Watchflix-Cloud
      - name: Run deployment script
        working-directory: ./Kubernetes
        shell: pwsh
        run: ./deploy-watchflix-pipeline.ps1